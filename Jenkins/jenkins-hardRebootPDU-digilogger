
// Functions

def archiveArtifacts(pattern) {
    step([$class: 'ArtifactArchiver', artifacts: pattern, fingerprint: true, onlyIfSuccessful: false])
}


// Main Pipeline

pipeline {
    agent { node { label "${TARGET_STAND}"} }

    stages {
        stage('Prepare tests') {
            steps {
                script {
                    echo "----------------------------------------"
                    echo "--- TARGET STAND: ${TARGET_STAND}"
                    echo "----------------------------------------"
      	        }
      	    }
        }
        stage('Install Python Dependencies') {
            steps {
                script {
                    echo "----------------------------------------"
                    echo "PYTEST Selected, Installing Dependencies"
                    echo "----------------------------------------"
                    sh "sh utilities/requirements.txt"
                }
            }
        }
        stage('Hard Reboot') {
            steps {
                script {
                    echo "----------------------------------------"
                    echo "Starting Hard Reboot Testing"
                    echo "----------------------------------------"
                    sh "mkdir -p artifacts"

                    def localIP = params['Local IP Address']
                    def remoteIP = params['Remote IP Address']

                    def pdu_ip = params['PDU IP Address']
                    def pdu_port = params['PDU Port']

                    echo "Local IP Address: ${localIP}"
                    echo "Remote IP Address: ${remoteIP}"
                    echo "PDU IP Address: ${pdu_ip}"
                    echo "PDU Port: ${pdu_port}"

                    for (int i = 1; i <= params."Reboot Count".toInteger() ; i++) {
                        echo "******* Iteration : ${i} *******"
                        sh "pytest -v -s testCases/test_HardReboot_DigiLogger.py::test_hardreboot --local-ip '$localIP' --remote-ip '$remoteIP' --pdu-ip 'pdu_ip' --pdu-port 'pdu_port' 2>&1"
                    }
                    archiveArtifacts('artifacts/**/*')
                    archiveArtifacts('SerialLogs_Device.log')
                }
            }
        }
    }
    post {
        always {
            echo "-----------------------------------------"
            echo 'Script Done!'
            echo "-----------------------------------------"
        }

        success {
            echo "-----------------------------------------"
            echo 'Script Success'
            echo "-----------------------------------------"
        }

        failure {
            echo "-----------------------------------------"
            echo 'Script Failure'
            echo "-----------------------------------------"
        }
    }
}