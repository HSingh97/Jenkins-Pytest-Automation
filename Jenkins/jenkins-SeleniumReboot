import jenkins.model.Jenkins

// Functions

def archiveArtifacts(pattern) {
    step([$class: 'ArtifactArchiver', artifacts: pattern, fingerprint: true, onlyIfSuccessful: false])
}


// Main Pipeline

pipeline {
    agent { node { label "${TARGET_STAND}"} }

    stages {
        stage('Prepare tests') {
            steps {
                script {
                    echo "----------------------------------------"
                    echo "--- TARGET STAND: ${TARGET_STAND}"
                    echo "----------------------------------------"
      	        }
      	    }
        }
        stage('Install Dependencies') {
            steps {
                script {
                    echo "----------------------------------------"
                    echo "Installing Dependencies"
                    echo "----------------------------------------"
                    sh "sh utilities/requirements.txt"
                }
            }
        }
        stage('Access and Login') {
            steps {
                script {
                    def localIP = params['Local IP Address']
                    def remoteIP = params['Remote IP Address']

                    echo "Local IP Address: ${localIP}"
                    echo "Remote IP Address: ${remoteIP}"

                    sh "pytest -v -s testCases/test_login.py::test_HomePageTitle --local-ip '$localIP' --remote-ip '$remoteIP'"
                    }
                }
        }
        stage('Reboot') {
            steps {
                script {
                    sh "mkdir -p artifacts"

                    def localIP = params['Local IP Address']
                    def remoteIP = params['Remote IP Address']

                    echo "Local IP Address: ${localIP}"
                    echo "Remote IP Address: ${remoteIP}"

                    for (int i = 1; i <= REBOOT_COUNT.toInteger() ; i++) {
                        sh "pytest -v -s testCases/test_reboot.py::test_Reboot --local-ip '$localIP' --remote-ip '$remoteIP' 2>&1"
                        // sh "echo Iteration : ${i} 2>&1 | tee -a ${workspace}/SerialLogs_AP_${i}.log"
                    }
                }
            }
        }
    }
    post {
        always {
            echo "-----------------------------------------"
            echo 'Script Done!'
            echo "-----------------------------------------"
            script {
                def buildCauses = currentBuild.getBuildCauses()
                def userCause = buildCauses.find { it._class == 'hudson.model.Cause$UserIdCause' }

                def buildUserName = userCause?.userName ?: "Unknown User"
                def buildUserId = userCause?.userId ?: "unknown"

                echo "Build started by: ${buildUserName} (${buildUserId})"

                // Define a mapping of user IDs to emails (update as needed)
                def userEmails = [
                    "harman": "harmanjot.singh@senao.com",
                    "mahesh": "mahesh.battala@mahesh.com",
                    "sandeep": "sandeep.manchikanti@senao.com",
                    "sampath": "sampath.marella@senao.com",
                    "jayanth": "jayanth.munnaluru@senao.com",
                    "srilatha": "srilatha.tadiboina@senao.com",
                    "phani": "phani.darla@senao.com"
                ]

                // Get email from predefined mapping, else use default
                def userEmail = userEmails.get(buildUserId, "harmanjot.singh@senao.com")

                echo "Sending email to: ${userEmail}"

                // Send email notification
                emailext(
                    subject: "Jenkins Build: ${currentBuild.fullDisplayName} - ${currentBuild.currentResult}",
                    body: """
                        <html>
                        <body>
                            <h2 style="color:blue;">Jenkins Build Notification</h2>
                            <p><strong>Build Name:</strong> ${currentBuild.fullDisplayName}</p>
                            <p><strong>Status:</strong> <span style="color:${currentBuild.currentResult == 'SUCCESS' ? 'green' : 'red'};">
                                ${currentBuild.currentResult}</span></p>
                            <p><strong>Started By:</strong> ${buildUserName} (${buildUserId})</p>
                            <p><strong>Build URL:</strong> <a href="${env.BUILD_URL}">${env.BUILD_URL}</a></p>
                            <p><strong>Console Output:</strong> <a href="${env.BUILD_URL}console">${env.BUILD_URL}console</a></p>
                            <br/>
                            <p style="color:gray;">--<br/>Jenkins Automated Notification</p>
                        </body>
                        </html>
                    """,
                    to: userEmail,
                    mimeType: 'text/html'
                )
            }
        }

        success {
            echo "-----------------------------------------"
            echo 'Script Success'
            echo "-----------------------------------------"
        }

        failure {
            echo "-----------------------------------------"
            echo 'Script Failure'
            echo "-----------------------------------------"
        }
    }
}