
// Functions

def archiveArtifacts(pattern) {
    step([$class: 'ArtifactArchiver', artifacts: pattern, fingerprint: true, onlyIfSuccessful: false])
}


// Main Pipeline

pipeline {
    agent { node { label "${TARGET_STAND}"} }

    stages {
        stage('Prepare tests') {
            steps {
                script {
                    echo "----------------------------------------"
                    echo "--- TARGET STAND: ${TARGET_STAND}"
                    echo "----------------------------------------"
      	        }
      	    }
        }
        stage('Install Python Dependencies') {
            steps {
                script {
                    echo "----------------------------------------"
                    echo "PYTEST Selected, Installing Dependencies"
                    echo "----------------------------------------"
                    sh "sh utilities/requirements.txt"
                }
            }
        }
        stage('Hard Reboot') {
            steps {
                script {
                    def localIP = params['Local IP Address']
                    def remoteIP = params['Remote IP Address']
                    def pduIP = params['PDU IP Address']
                    def pduPort = params['PDU Port']
                    def resetType = params['Reset Type']
                    def rebootCount = params['Reboot Count']

                    echo "Local IP Address   : ${localIP}"
                    echo "Remote IP Address  : ${remoteIP}"
                    echo "PDU IP             : ${pduIP}"
                    echo "PDU Port           : ${pduPort}"
                    echo "Reset Type         : ${resetType}"

                    def reset_type_value = (resetType == "ON/OFF") ? 0 : 1

                    echo "----------------------------------------"
                    echo "Hard Rebooting the Device"
                    echo "----------------------------------------"

                     for (int i = 1; i <= rebootCount.toInteger() ; i++) {
                        sh "pytest -v -s testCases/test_HardReboot_Teamlink.py::test_DyingGasp --local-ip '$localIP' --remote-ip '$remoteIP' --pdu-ip '$pduIP' --pdu-port '$pduPort' --reset-type '$reset_type_value' 2>&1"
                        // sh "echo Iteration : ${i} 2>&1 | tee -a ${workspace}/SerialLogs_AP_${i}.log"
                    }
                }
            }
        }
    }
    post {
        always {
            echo "-----------------------------------------"
            echo 'Script Done!'
            echo "-----------------------------------------"
        }

        success {
            echo "-----------------------------------------"
            echo 'Script Success'
            echo "-----------------------------------------"
        }

        failure {
            echo "-----------------------------------------"
            echo 'Script Failure'
            echo "-----------------------------------------"
        }
    }
}