// Functions

def archiveArtifacts(pattern) {
    step([$class: 'ArtifactArchiver', artifacts: pattern, fingerprint: true, onlyIfSuccessful: false])
}


// Main Pipeline

pipeline {
    agent { node { label "${TARGET_STAND}"} }

    stages {
        stage('Prepare tests') {
            steps {
                script {
                    echo "----------------------------------------"
                    echo "---> TARGET STAND: ${TARGET_STAND} "
                    echo "----------------------------------------"
      	        }
      	    }
        }
        stage('Install Dependencies') {
            steps {
                script {
                    echo "----------------------------------------"
                    echo "         Installing Dependencies"
                    echo "----------------------------------------"
                    sh "sh utilities/requirements.txt"
                }
            }
        }
        stage('Channel Testing') {
            steps {
                script {
                    def localIP = params['Local IP Address']
                    def remoteIP = params['Remote IP Address']
                    def selectedRadio = params['Radio']
                    def bandwidths = params.Bandwidth.split(',')
                    def countries = params.Countries.split(',')

                    // Clear old files
                    sh 'rm -f *_HT*.json iteration_results.json'
                    echo "✅ Cleared old workspace"

                    // Init only once
                    sh "echo {\\\"iterations\\\": []} > iteration_results.json"

                    def iteration = 1

                    for (country in countries) {
                        for (bandwidth in bandwidths) {

                            echo "----------------------------------------"
                            echo " Testing: Country=${country}, Bandwidth=${bandwidth}"
                            echo "----------------------------------------"

                            def pytest_output = sh(script: """
                                pytest -v -s testCases/test_channelTest.py::test_channelconnectivity \
                                --local-ip '$localIP' --remote-ip '$remoteIP' \
                                --radio '$selectedRadio' --bandwidth '$bandwidth' --country '$country' \
                                2>&1
                            """, returnStdout: true).trim()

                            echo "Pytest Output:\n${pytest_output}"

                            // Read JSON and filter this test's data
                            def iterationResults = readJSON file: 'custom_results.json'
                            def normalizedBandwidth = bandwidth == "HT40" ? "HT40+" : bandwidth

                            def newTests = iterationResults.iterations.findAll {
                                it.Country == country && it.Bandwidth == normalizedBandwidth
                            }

                            newTests.each { test ->
                                test.iteration = iteration++
                                test.logs = pytest_output
                            }

                            def filename = "${country.trim().replaceAll("\\s+", "_")}_${bandwidth.trim()}.json"
                            writeJSON file: filename, json: [iterations: newTests]

                            newTests.each {
                                echo "Iteration ${it.iteration} - ${it.test} => ${it.status}"
                                echo "Country: ${it.Country}, Bandwidth: ${it.Bandwidth}"
                                echo "Channels Tested:"
                                it['Tested Channels'].each { ch ->
                                    echo "  - Channel: ${ch.channel}, Status: ${ch.status}"
                                }
                            }
                        }
                    }
                }
            }
        }
        stage('Generate Report') {
            steps {
                script {
                    def reportFiles = findFiles(glob: '*_HT*.json') {
                        it.name != 'iteration_results.json' && it.length > 20
                    }

                    def allResults = []

                    reportFiles.each { file ->
                        def data = readJSON file: file.name
                        if (data?.iterations && !data.iterations.isEmpty()) {
                            allResults << [filename: file.name, content: data.iterations]
                        }
                    }

                    def buildParams = [
                        "Local IP Address": params['Local IP Address'],
                        "Remote IP Address": params['Remote IP Address'],
                        "Radio"           : params['Radio'],
                        "Countries"       : params['Countries'],
                        "Bandwidths"      : params['Bandwidth']
                    ]

                    def istZone = TimeZone.getTimeZone("Asia/Kolkata")
                    def istDate = Calendar.getInstance(istZone).getTime()
                    def currentDateTime = istDate.format("dd MMM yyyy, HH:mm:ss z", istZone)
                    def companyLogoUrl = "https://manuals.plus/wp-content/uploads/2023/06/Senao-Networks-logo.png"
                    def pipelineName = env.JOB_NAME

                    def htmlContent = """
                        <html>
                        <head>
                            <title>Channel Test Report</title>
                            <style>
                                body { font-family: 'Segoe UI', Tahoma, sans-serif; padding: 20px; background-color: #f9f9f9; color: #2c3e50; }
                                .header { display: flex; justify-content: space-between; align-items: center; background: #fff; padding: 20px; border-bottom: 2px solid #e0e0e0; }
                                .header img { height: 60px; }
                                .header-info { text-align: right; }
                                .header-info h1 { margin: 0; font-size: 24px; }
                                .header-info p { margin: 5px 0; font-size: 14px; color: #555; }
                                h2 { margin-top: 40px; font-size: 20px; border-bottom: 2px solid #ddd; padding-bottom: 5px; }
                                table { width: 100%; border-collapse: collapse; margin-top: 15px; background: #fff; box-shadow: 0 2px 5px rgba(0,0,0,0.05); }
                                th, td { padding: 12px 15px; border: 1px solid #ddd; text-align: left; }
                                th { background: #2c3e50; color: white; }
                                tr:nth-child(even) { background-color: #f4f4f4; }
                                .pass { color: green; font-weight: bold; }
                                .fail { color: red; font-weight: bold; }
                            </style>
                        </head>
                        <body>
                            <div class="header">
                                <img src="${companyLogoUrl}" />
                                <div class="header-info">
                                    <h1>Automated Channel Connectivity Report</h1>
                                    <p><strong>Pipeline:</strong> ${pipelineName}</p>
                                    <p><strong>Date:</strong> ${currentDateTime}</p>
                                </div>
                            </div>

                            <h2>Build Parameters</h2>
                            <table>
                                ${buildParams.collect { "<tr><td><b>${it.key}</b></td><td>${it.value}</td></tr>" }.join('\n')}
                            </table>
                    """

                    allResults.each { resultFile ->
                        def parts = resultFile.filename.replace('.json','').split('_')
                        def country = parts[0..-2].join(' ')
                        def bandwidth = parts[-1]

                        htmlContent += """
                            <h2>
                                Country: <i><span style="background-color:#ffff99; padding:2px 6px; border-radius:4px;"><b>${country}</b></span></i> |
                                Bandwidth: <i><span style="background-color:#d0ebff; padding:2px 6px; border-radius:4px;"><b>${bandwidth} MHz</b></span></i>
                            </h2>

                            <table>
                                <tr>
                                    <th>Channel</th>
                                    <th>Status</th>
                                    <th>Remote IP</th>
                                    <th>Local SNR A1</th>
                                    <th>Local SNR A2</th>
                                    <th>Remote SNR A1</th>
                                    <th>Remote SNR A2</th>
                                    <th>Tx Rate</th>
                                    <th>Rx Rate</th>
                                </tr>
                        """

                        resultFile.content.each { iteration ->
                            iteration["Tested Channels"].each { channel ->
                                def stats = channel["link_stats"]
                                def status = channel["status"] == "PASS"
                                    ? "<span class='pass'>✅ PASS</span>"
                                    : "<span class='fail'>❌ FAIL</span>"

                                htmlContent += """
                                    <tr>
                                        <td>${channel.channel}</td>
                                        <td>${status}</td>
                                        <td>${stats?.ip_address ?: 'N/A'}</td>
                                        <td>${stats?.local_SNR_A1 ?: '-'}</td>
                                        <td>${stats?.local_SNR_A2 ?: '-'}</td>
                                        <td>${stats?.remote_SNR_A1 ?: '-'}</td>
                                        <td>${stats?.remote_SNR_A2 ?: '-'}</td>
                                        <td>${stats?.tx_rate ?: '-'}</td>
                                        <td>${stats?.rx_rate ?: '-'}</td>
                                    </tr>
                                """
                            }
                        }

                        htmlContent += "</table>"
                    }

                    htmlContent += "</body></html>"
                    writeFile file: 'channel_test_report.html', text: htmlContent
                    echo "📄 HTML report generated: channel_test_report.html"
                }
            }
        }
    }
    post {
        always {
            publishHTML (target: [
                allowMissing: false,
                alwaysLinkToLastBuild: true,
                keepAll: true,
                reportDir: '.',
                reportFiles: 'channel_test_report.html',
                reportName: 'Test Report'
            ])
            echo "-----------------------------------------"
            echo 'Script Done!'
            echo "-----------------------------------------"
            script {
                def buildCauses = currentBuild.getBuildCauses()
                def userCause = buildCauses.find { it._class == 'hudson.model.Cause$UserIdCause' }

                def buildUserName = userCause?.userName ?: "Unknown User"
                def buildUserId = userCause?.userId ?: "unknown"

                echo "Build started by: ${buildUserName} (${buildUserId})"

                // Define a mapping of user IDs to emails (update as needed)
                def userEmails = [
                    "harman": "harmanjot.singh@senao.com",
                    "mahesh": "mahesh.battala@mahesh.com",
                    "sandeep": "sandeep.manchikanti@senao.com",
                    "sampath": "sampath.marella@senao.com",
                    "jayanth": "jayanth.munnaluru@senao.com",
                    "srilatha": "srilatha.tadiboina@senao.com",
                    "phani": "phani.darla@senao.com"
                ]

                // Get email from predefined mapping, else use default
                def userEmail = userEmails.get(buildUserId, "harmanjot.singh@senao.com")

                echo "Sending email to: ${userEmail}"

                // Send email notification
                emailext(
                    subject: "Jenkins Build: ${currentBuild.fullDisplayName} - ${currentBuild.currentResult}",
                    body: """
                        <html>
                        <body>
                            <h2 style="color:blue;">Jenkins Build Notification</h2>
                            <p><strong>Build Name:</strong> ${currentBuild.fullDisplayName}</p>
                            <p><strong>Status:</strong>
                                <span style="color:${currentBuild.currentResult == 'SUCCESS' ? 'green' : 'red'};">
                                ${currentBuild.currentResult}</span>
                            </p>
                            <p><strong>Started By:</strong> ${buildUserName} (${buildUserId})</p>
                            <p><strong>Build URL:</strong> <a href="${env.BUILD_URL}">${env.BUILD_URL}</a></p>
                            <p><strong>Console Output:</strong> <a href="${env.BUILD_URL}console">${env.BUILD_URL}console</a></p>
                            <p><strong>HTML Report:</strong> <a href="${env.BUILD_URL}artifact/channel_test_report.html">Click here to view</a></p>
                            <br/>
                            <p style="color:gray;">--<br/>Jenkins Automated Notification</p>
                        </body>
                        </html>
                    """,
                    to: userEmail,
                    mimeType: 'text/html',
                    attachmentsPattern: 'channel_test_report.html'
                )

            }
        }

        success {
            echo "-----------------------------------------"
            echo 'Script Success'
            echo "-----------------------------------------"
        }

        failure {
            echo "-----------------------------------------"
            echo 'Script Failure'
            echo "-----------------------------------------"
        }
    }
}