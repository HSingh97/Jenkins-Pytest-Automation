// Functions

def archiveArtifacts(pattern) {
    step([$class: 'ArtifactArchiver', artifacts: pattern, fingerprint: true, onlyIfSuccessful: false])
}


// Main Pipeline

pipeline {
    agent { node { label "${TARGET_STAND}"} }

    stages {
        stage('Prepare tests') {
            steps {
                script {
                    echo "----------------------------------------"
                    echo "---> TARGET STAND: ${TARGET_STAND} "
                    echo "----------------------------------------"
      	        }
      	    }
        }
        stage('Install Dependencies') {
            steps {
                script {
                    echo "----------------------------------------"
                    echo "         Installing Dependencies"
                    echo "----------------------------------------"
                    sh "sh utilities/requirements.txt"
                }
            }
        }
        stage('Channel Testing') {
            steps {
                script {
                    echo "----------------------------------------"
                    echo "Starting Channel Testing"
                    echo "----------------------------------------"
                    sh "mkdir -p artifacts"

                    def localIP = params['Local IP Address']
                    def remoteIP = params['Remote IP Address']

                    def selectedradio = params.Radio

                    echo "Local IP Address: ${localIP}"
                    echo "Remote IP Address: ${remoteIP}"

                    def bandwidths = params.Bandwidth.split(',')
                    def countries = params.Country.split(',')

                    for (country in countries) {
                        for (bandwidth in bandwidths) {
                            echo "Country=${country}, Bandwidth=${bandwidth}"
                            echo "-------- Started Channel Connectivity Test for ${selectedradio} with Bandwidth: ${bandwidth} and Country: ${country} --------- "
                            sh "pytest -v -s testCases/test_channelTest.py::test_channelconnectivity --radio '$selectedradio' --local-ip '$localIP' --remote-ip '$remoteIP' --bandwidth '$bandwidth' --country '$country' 2>&1"
                            echo "-------- Channel Connectivity Test completed for ${selectedradio} with Bandwidth: ${bandwidth} and Country: ${country} --------- "
                        }
                    }
                }
            }
        }
        stage('Generate Report') {
            steps {
                script {
                    // Example script to convert JSON to HTML (can use Python or any preferred language)
                    def htmlTemplate = """
                    <html>
                    <head><title>Job Report</title></head>
                    <body>
                    <h1>Job Report</h1>
                    <table border="1">
                    <tr><th>Iteration</th><th>Status</th><th>Detail</th></tr>
                    ${new groovy.json.JsonSlurper().parse(new File('results/iteration_results.json')).collect { "<tr><td>${it.iteration}</td><td>${it.status}</td><td>${it.detail}</td></tr>" }.join('\n')}
                    </table>
                    </body>
                    </html>
                    """
                    writeFile file: 'results/report.html', text: htmlTemplate
                }
            }
        }
    }
    post {
        always {
            echo "-----------------------------------------"
            echo 'Script Done!'
            echo "-----------------------------------------"
            emailext (
                to: 'harmanjot.singh@senao.com',
                subject: "Build ${env.JOB_NAME} #${env.BUILD_NUMBER} - ${currentBuild.currentResult}",
                body: """
                Job '${env.JOB_NAME} [${env.BUILD_NUMBER}]' (${env.BUILD_URL}) completed with status: ${currentBuild.currentResult}
                Check console output at: ${env.BUILD_URL}console
                """
            )
            echo "email sent"
            archiveArtifacts artifacts: 'results/**', allowEmptyArchive: true // Save results for later
            publishHTML(target: [
                allowMissing: false,
                alwaysLinkToLastBuild: true,
                keepAll: true,
                reportDir: 'results',
                reportFiles: 'report.html',
                reportName: 'Iteration Report'
            ])
        }

        success {
            echo "-----------------------------------------"
            echo 'Script Success'
            echo "-----------------------------------------"
        }

        failure {
            echo "-----------------------------------------"
            echo 'Script Failure'
            echo "-----------------------------------------"
        }
    }
}