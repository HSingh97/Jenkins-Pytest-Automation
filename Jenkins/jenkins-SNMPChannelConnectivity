// Functions

def archiveArtifacts(pattern) {
    step([$class: 'ArtifactArchiver', artifacts: pattern, fingerprint: true, onlyIfSuccessful: false])
}


// Main Pipeline

pipeline {
    agent { node { label "${TARGET_STAND}"} }

    stages {
        stage('Prepare tests') {
            steps {
                script {
                    echo "----------------------------------------"
                    echo "---> TARGET STAND: ${TARGET_STAND} "
                    echo "----------------------------------------"
      	        }
      	    }
        }
        stage('Install Dependencies') {
            steps {
                script {
                    echo "----------------------------------------"
                    echo "         Installing Dependencies"
                    echo "----------------------------------------"
                    sh "sh utilities/requirements.txt"
                }
            }
        }
        stage('Channel Testing') {
            steps {
                script {
                    echo "----------------------------------------"
                    echo "Starting Channel Testing"
                    echo "----------------------------------------"
                    sh "mkdir -p artifacts"

                    def localIP = params['Local IP Address']
                    def remoteIP = params['Remote IP Address']

                    def bandwidthList = params.bandwidths.split(',')
                    def countryList = params.countries.split(',')

                    def selectedradio = params.Radio

                    echo "Local IP Address: ${localIP}"
                    echo "Remote IP Address: ${remoteIP}"
                    echo "Bandwidth: ${params.bandwidth}"
                    echo "Country: ${params.country}"

                    for (country in countryList) {
                        for (bandwidth in bandwidthList) {
                            echo "-------- Started Channel Connectivity Test for ${selectedradio} with Bandwidth: ${bandwidth} and Country: ${country} --------- "
                            sh "pytest -v -s --radio '$selectedradio' --local-ip '$localIP' --remote-ip '$remoteIP' --bandwidth '$bandwidth' --country '$country' testCases/test_channelTest.py::test_channelconnectivity 2>&1"
                        }
                    }
                }
            }
        }
    }
    post {
        always {
            echo "-----------------------------------------"
            echo 'Script Done!'
            echo "-----------------------------------------"
        }

        success {
            echo "-----------------------------------------"
            echo 'Script Success'
            echo "-----------------------------------------"
        }

        failure {
            echo "-----------------------------------------"
            echo 'Script Failure'
            echo "-----------------------------------------"
        }
    }
}