import jenkins.model.Jenkins

// Functions

def archiveArtifacts(pattern) {
    step([$class: 'ArtifactArchiver', artifacts: pattern, fingerprint: true, onlyIfSuccessful: false])
}


// Main Pipeline

pipeline {
    agent { node { label "${TARGET_STAND}"} }

    stages {
        stage('Prepare tests') {
            steps {
                script {
                    echo "----------------------------------------"
                    echo "--- TARGET STAND: ${TARGET_STAND}"
                    echo "----------------------------------------"
      	        }
      	    }
        }
        stage('Install Python Dependencies') {
            steps {
                script {
                    echo "----------------------------------------"
                    echo "Installing Dependencies"
                    echo "----------------------------------------"
                    sh "sh utilities/requirements.txt"
                }
            }
        }
        stage('Command Execution') {
            steps {
                script {
                    def localIP = params['Local IP Address']
                    def remoteIP = params['Remote IP Address']
                    def command = params['Command']
                    def ssh_username = params['SSH User']
                    def ssh_password = params['SSH Password']
                    def sleep_time = params['Sleep Time Between Iterations']
                    def bw_check = params['Check Bandwidth']
                    def datarate_check = params['Check Data Rate']

                    echo "----------------------------------------"
                    echo "Executing Command"
                    echo "----------------------------------------"

                    sh "echo [] > iteration_results.json"  // Initialize JSON array

                    for (int i = 1; i <= Iterations.toInteger(); i++) {
                        def pytest_output = sh(script: """
                            pytest -v -s testCases/test_AnyCommand.py::test_command \
                            --local-ip '$localIP' --remote-ip '$remoteIP' --command '$command' \
                            --username '$ssh_username' --password '$ssh_password' --sleep '$sleep_time' \
                            --check_rate '$datarate_check' --check_bw '$bw_check' \
                            --json-report --json-report-file=iteration_result.json 2>&1
                        """, returnStdout: true).trim()

                        def iterationResult = readJSON file: 'iteration_result.json'
                        def allResults = readJSON file: 'iteration_results.json'

                        iterationResult.tests.each { test ->
                            def iterationData = [
                                iteration: i,
                                name: test.nodeid,
                                status: test.outcome,
                                logs: pytest_output
                            ]
                            allResults.add(iterationData)
                        }

                        writeJSON file: 'iteration_results.json', json: allResults
                    }
                }
            }
        }
        stage('Generate Report') {
            steps {
                script {
                    def jsonReport = readJSON file: 'iteration_results.json'
                    def buildParams = [
                        "Local IP Address": params['Local IP Address'],
                        "Remote IP Address": params['Remote IP Address'],
                        "Command": params['Command'],
                        "SSH User": params['SSH User'],
                        "Sleep Time": params['Sleep Time Between Iterations'],
                        "Check Bandwidth": params['Check Bandwidth'],
                        "Check Data Rate": params['Check Data Rate']
                    ]

                    def htmlContent = """
                        <html>
                        <head><title>Test Report</title></head>
                        <body>
                        <h2>Build Parameters</h2>
                        <table border="1">
                        ${buildParams.collect { "<tr><td><b>${it.key}</b></td><td>${it.value}</td></tr>" }.join('\n')}
                        </table>
                        <h2>Iteration Results</h2>
                        <table border="1">
                        <tr><th>Iteration</th><th>Test Case</th><th>Status</th></tr>
                    """

                    jsonReport.each { result ->
                        def status = result.status == "passed" ? "✅ PASS" : "❌ FAIL"
                        htmlContent += "<tr><td>${result.iteration}</td><td>${result.name}</td><td>${status}</td></tr>"
                    }

                    htmlContent += """
                        </table>
                        </body></html>
                    """

                    writeFile file: 'report.html', text: htmlContent
                }
            }
        }


    }
    post {
        always {
            publishHTML (target: [
                allowMissing: false,
                alwaysLinkToLastBuild: true,
                keepAll: true,
                reportDir: '.',
                reportFiles: 'report.html',
                reportName: 'Test Report'
            ])
            echo "-----------------------------------------"
            echo 'Script Done!'
            echo "-----------------------------------------"
            script {
                def buildCauses = currentBuild.getBuildCauses()
                def userCause = buildCauses.find { it._class == 'hudson.model.Cause$UserIdCause' }

                def buildUserName = userCause?.userName ?: "Unknown User"
                def buildUserId = userCause?.userId ?: "unknown"

                echo "Build started by: ${buildUserName} (${buildUserId})"

                // Define a mapping of user IDs to emails (update as needed)
                def userEmails = [
                    "harman": "harmanjot.singh@senao.com",
                    "mahesh": "mahesh.battala@mahesh.com",
                    "sandeep": "sandeep.manchikanti@senao.com",
                    "sampath": "sampath.marella@senao.com",
                    "jayanth": "jayanth.munnaluru@senao.com",
                    "srilatha": "srilatha.tadiboina@senao.com",
                    "phani": "phani.darla@senao.com"
                ]

                // Get email from predefined mapping, else use default
                def userEmail = userEmails.get(buildUserId, "harmanjot.singh@senao.com")

                echo "Sending email to: ${userEmail}"

                // Send email notification
                emailext(
                    subject: "Jenkins Build: ${currentBuild.fullDisplayName} - ${currentBuild.currentResult}",
                    body: """
                        <html>
                        <body>
                            <h2 style="color:blue;">Jenkins Build Notification</h2>
                            <p><strong>Build Name:</strong> ${currentBuild.fullDisplayName}</p>
                            <p><strong>Status:</strong> <span style="color:${currentBuild.currentResult == 'SUCCESS' ? 'green' : 'red'};">
                                ${currentBuild.currentResult}</span></p>
                            <p><strong>Started By:</strong> ${buildUserName} (${buildUserId})</p>
                            <p><strong>Build URL:</strong> <a href="${env.BUILD_URL}">${env.BUILD_URL}</a></p>
                            <p><strong>Console Output:</strong> <a href="${env.BUILD_URL}console">${env.BUILD_URL}console</a></p>
                            <br/>
                            <p style="color:gray;">--<br/>Jenkins Automated Notification</p>
                        </body>
                        </html>
                    """,
                    to: userEmail,
                    mimeType: 'text/html',
                    attachmentsPattern: 'report.html'  // Only attach, do not embed
                )
            }
        }

        success {
            echo "-----------------------------------------"
            echo 'Script Success'
            echo "-----------------------------------------"
        }

        failure {
            echo "-----------------------------------------"
            echo 'Script Failure'
            echo "-----------------------------------------"
        }
    }
}