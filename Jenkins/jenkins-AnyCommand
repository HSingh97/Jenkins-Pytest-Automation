
// Functions

def archiveArtifacts(pattern) {
    step([$class: 'ArtifactArchiver', artifacts: pattern, fingerprint: true, onlyIfSuccessful: false])
}


// Main Pipeline

pipeline {
    agent { node { label "${TARGET_STAND}"} }

    stages {
        stage('Prepare tests') {
            steps {
                script {
                    echo "----------------------------------------"
                    echo "--- TARGET STAND: ${TARGET_STAND}"
                    echo "----------------------------------------"
      	        }
      	    }
        }
        stage('Install Python Dependencies') {
            steps {
                script {
                    echo "----------------------------------------"
                    echo "Installing Dependencies"
                    echo "----------------------------------------"
                    sh "sh utilities/requirements.txt"
                }
            }
        }
        stage('Command Execution') {
            steps {
                script {
                    def localIP = params['Local IP Address']
                    def remoteIP = params['Remote IP Address']
                    def command = params['Command']
                    def ssh_username = params['SSH User']
                    def ssh_password = params['SSH Password']
                    def sleep_time = params['Sleep Time Between Iterations']
                    def bw_check = params['Check Bandwidth']
                    def datarate_check = params['Check Data Rate']

                    echo "----------------------------------------"
                    echo "Executing Command"
                    echo "----------------------------------------"
                    for (int i = 1; i <= Iterations.toInteger() ; i++) {
                        sh "pytest -v -s testCases/test_AnyCommand.py::test_command --local-ip '$localIP' --remote-ip '$remoteIP' --command '$command' --username '$ssh_username' --password '$ssh_password' --sleep '$sleep_time' --check_rate '$datarate_check' --check_bw '$bw_check' 2>&1"
                    }
                }
            }
        }
    }
    post {
        always {
            echo "-----------------------------------------"
            echo 'Script Done!'
            echo "-----------------------------------------"
            script {
                // Get the user who started the build
                def buildUser = env.BUILD_USER_ID ?: 'unknown'

                // Set a default email if user email is not found
                def userEmail = buildUser == 'unknown' ? 'default@example.com' : "harmanjot.singh@senao.com"

                // Send email
                emailext(
                    subject: "Jenkins Build: ${currentBuild.fullDisplayName}",
                    body: "Build ${currentBuild.fullDisplayName} finished with status: ${currentBuild.currentResult}",
                    to: userEmail
                )
            }
        }

        success {
            echo "-----------------------------------------"
            echo 'Script Success'
            echo "-----------------------------------------"
        }

        failure {
            echo "-----------------------------------------"
            echo 'Script Failure'
            echo "-----------------------------------------"
        }
    }
}