
// Functions

def archiveArtifacts(pattern) {
    step([$class: 'ArtifactArchiver', artifacts: pattern, fingerprint: true, onlyIfSuccessful: false])
}


// Main Pipeline

pipeline {
    agent { node { label "${TARGET_STAND}"} }

    stages {
        stage('Prepare tests') {
            steps {
                script {
                    echo "----------------------------------------"
                    echo "--- TARGET STAND: ${TARGET_STAND}"
                    echo "----------------------------------------"
      	        }
      	    }
        }
        stage('Install Python Dependencies') {
            steps {
                script {
                    echo "----------------------------------------"
                    echo " Installing Dependencies"
                    echo "----------------------------------------"
                    sh "sh utilities/requirements.txt"
                }
            }
        }
        stage('Local Access') {
            steps {
                script {
                    sh "mkdir -p artifacts"
                    sh "pytest -v -s testCases/test_login.py::test_Login 2>&1 | tee ${workspace}/artifacts/login-device.log"
                    // archiveArtifacts('artifacts/**/*')
                }
            }
        }

        stage('Factory Reset') {
            steps {
                script {
                    sh "mkdir -p artifacts"
                    for (int i = 1; i <= RESET_COUNT.toInteger() ; i++) {
                        echo "----------------------------------------"
                        echo "Configuring Parameters"
                        echo "----------------------------------------"
                        sh "pytest -v -s testCases/test_factoryReset.py::def test_configureparams 2>&1"
                        echo "----------------------------------------"
                        echo "Factory Resetting the Device"
                        echo "----------------------------------------"
                        sh "pytest -v -s testCases/test_factoryReset.py::test_FactoryReset 2>&1"
                        echo "----------------------------------------"
                        echo "Verifying the Reset"
                        echo "----------------------------------------"
                        sh "pytest -v -s testCases/test_factoryReset.py::test_verifyparams 2>&1"
                    }
                    archiveArtifacts('artifacts/**/*')
                    archiveArtifacts('SerialLogs_Device.log')
                }
            }
        }
    }
    post {
        always {
            echo "-----------------------------------------"
            echo 'Script Done!'
            echo "-----------------------------------------"
        }

        success {
            echo "-----------------------------------------"
            echo 'Script Success'
            echo "-----------------------------------------"
        }

        failure {
            echo "-----------------------------------------"
            echo 'Script Failure'
            echo "-----------------------------------------"
        }
    }
}